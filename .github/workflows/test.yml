name: Test Suite

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
    
    - name: Install Node.js for MCP servers
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install MCP servers
      run: |
        npm install -g @modelcontextprotocol/server-filesystem
        uv tool install mcp-server-fetch
    
    - name: Run type checking
      run: |
        uv run mypy src/
    
    - name: Run linting
      run: |
        uv run ruff check src/ tests/
    
    - name: Run formatting check
      run: |
        uv run black --check src/ tests/
        uv run isort --check-only src/ tests/
    
    - name: Run unit tests
      run: |
        uv run pytest -m "not integration and not slow" --cov=smolval --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event.pull_request.draft == false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python 3.12
      run: uv python install 3.12
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
    
    - name: Install Node.js for MCP servers
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install MCP servers
      run: |
        npm install -g @modelcontextprotocol/server-filesystem
        uv tool install mcp-server-fetch
    
    - name: Set up Docker for SQLite MCP server
      uses: docker/setup-buildx-action@v3
    
    - name: Pull SQLite MCP server image
      run: |
        docker pull mcp/sqlite
    
    - name: Run integration tests (without real LLM)
      run: |
        uv run pytest tests/test_integration.py tests/test_integration_simple.py -v
      env:
        # Don't run tests requiring real API keys in CI
        SKIP_REAL_LLM_TESTS: "true"

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python 3.12
      run: uv python install 3.12
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
    
    - name: Run security scan
      run: |
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json